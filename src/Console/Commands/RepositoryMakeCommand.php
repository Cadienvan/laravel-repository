<?php

namespace Czim\Repository\Console\Commands;

use Czim\Repository\BaseRepository;
use Czim\Repository\RepositoryServiceProvider;
use Illuminate\Console\GeneratorCommand;
use Illuminate\Filesystem\Filesystem;

class RepositoryMakeCommand extends GeneratorCommand
{
    /**
     * The namespace for repositories generated by the make:repository command.
     *
     * @var string
     */
    private $namespace = 'App\\Repositories';

    /**
     * The base repository class to look for.
     *
     * @var string
     */
    private $base = BaseRepository::class;

    /**
     * The suffix of each and every Repository.
     * This will be subtracted to generate de propable model class names.
     *
     * @var string
     */
    private $suffix = 'Repository';

    /**
     * The locations where Eloquent models are stored.
     *
     * @var string
     */
    private $models = 'App';

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $name = 'make:repository';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new Eloquent model repository class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Repository';

    /**
     * Create a new command instance.
     * @param Filesystem $fileSystem
     */
    public function __construct(Filesystem $fileSystem)
    {
        $this->loadConfig();

        parent::__construct($fileSystem);
    }

    /**
     * Load the configuration for the command.
     */
    private function loadConfig()
    {
        $this->namespace = config('repository.namespace', $this->namespace);
        $this->base = config('repository.base', $this->base);
        $this->suffix = config('repository.suffix', $this->suffix);
        $this->models = config('repository.models', $this->models);
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return RepositoryServiceProvider::$packagePath . '/stubs/repository.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string $rootNamespace
     * @return string
     */
    public function getDefaultNamespace($rootNamespace)
    {
        return $this->namespace;
    }

    /**
     * Build the class with the given name.
     *
     * @param  string $name
     * @return string
     */
    protected function buildClass($name)
    {
        $stub = parent::buildClass($name);

        $modelName = $this->getModelClass($name);

        $this->replaceModelNamespace($stub, $modelName);
        $this->replaceModelClass($stub, $modelName);

        $this->replaceBaseRepositoryNamespace($stub, $this->base);
        $this->replaceBaseRepositoryClass($stub, $this->base);

        return $stub;
    }

    /**
     * Replace the probable namespace for the given stub.
     *
     * @param  string $stub
     * @param  string $name
     * @return $this
     */
    private function replaceModelNamespace(&$stub, $name)
    {
        $stub = str_replace('DummyModelNamespace', $name, $stub);

        return $this;
    }

    /**
     * Replace the probable model class name for the given stub.
     *
     * @param  string $stub
     * @param  string $name
     * @return $this
     */
    private function replaceModelClass(&$stub, $name)
    {
        $names = explode('\\', $name);
        $class = array_pop($names);

        $stub = str_replace('DummyModelClass', $class, $stub);

        return $this;
    }

    /**
     * Get the class name of the probable associated model.
     *
     * @param $name
     * @return string
     */
    private function getModelClass($name)
    {
        $repositoryClass = str_replace($this->getNamespace($name) . '\\', '', $name);
        $class = str_replace($this->suffix, '', $repositoryClass);

        $classSingular = str_singular($class);

        $modelClass = "{$this->models}\\{$classSingular}";

        return $modelClass;
    }

    /**
     * Replace the default base repository class namespace for the given stub.
     *
     * @param  string $stub
     * @param  string $name
     * @return string
     */
    private function replaceBaseRepositoryNamespace(&$stub, $name)
    {
        $stub = str_replace('BaseRepositoryNamespace', $name, $stub);

        return $this;
    }

    /**
     * Replace the default base repository class name for the given stub.
     *
     * @param  string $stub
     * @param  string $name
     * @return string
     */
    private function replaceBaseRepositoryClass(&$stub, $name)
    {
        $baseClass = str_replace($this->getNamespace($name) . '\\', '', $name);
        $stub = str_replace('BaseRepositoryClass', $baseClass, $stub);

        return $this;
    }
}
